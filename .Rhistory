username <- "natasha1704"
key <- "6771868f39819cbbeae184534584125c"
library(shiny); runApp('Project-2.R')
kaggle.api <- "https://www.kaggle.com/api/v1/datasets/download/crawford/boston-public-schools/Public_Schools.csv"
kaggle.auth <- function() {
source("credentials2.R")
httr::authenticate(username, key)
}
response <- httr::GET(kaggle.api, kaggle.auth())
#data<-writeOGR(Bostonschools,driver="GEOJSON")
Bostonschools<- read_csv(response$content)
bostonschoolsmap<-readOGR("Public_Schools.geojson")
schooldistrict<-readOGR("Boston_Neighborhoods.shp")
citylist<-unique(bostonschoolsmap$CITY)
schoollist<-unique(bostonschoolsmap$SCH_TYPE)
zipcodelist<-unique(bostonschoolsmap$ZIPCODE)
populationlist<-unique(bostonschoolsmap$PL)
bostonmapsInputs <- reactive({
bostonschoolsmap <- bostonschoolsmap %>%
if (length(input$populationselect) > 0) {
bostonschoolsmap <- subset(bostonschoolsmap, PL %in% input$populationselect)
}
#if (length(input$cityselect) > 0) {
bostonschoolsmap <- subset(bostonschoolsmap, CITY %in% input$citySelect)
#}
#if (length(input$schooltypeselect) > 0) {
#  bostonschoolsmap <- subset(bostonschoolsmap, SCH_TYPE %in% input$schooltypeselect)
#}
#if (length(input$zipcodeselect) > 0) {
#  bostonschoolsmap <- subset(bostonschoolsmap, ZIPCODE %in% input$zipcodeselect)
#}
return(bostonschoolsmap)
})
runApp('Project-2.R')
runApp('Project-2.R')
runApp('Project-2.R')
runApp('Project-2.R')
bostonInputs <- reactive({
Bostonschools <- Bostonschools%>%
if (length(input$cityselect) > 0) {
Bostonschools <- subset(Bostonschools, CITY %in% input$citySelect)
}
if (length(input$schooltypeselect) > 0) {
Bostonschools <- subset(Bostonschools, SCH_TYPE %in% input$schooltypeselect)
}
if (length(input$zipcodeselect) > 0) {
Bostonschools <- subset(Bostonschools, ZIPCODE %in% input$zipcodeselect)
}
return(Bostonschools)
})
runApp('Project-2.R')
runApp('Project-2.R')
ggplot(data =  Bostonschools, aes(x =SCH_TYPE)) +
geom_histogram(stat="count") +
labs(title= "Number of schools per type",
x= "Number of schools", y= "school type")
runApp('Project-2.R')
runApp('Project-2.R')
runApp('Project-2.R')
leaflet()%>%
addProviderTiles("OpenStreetMap.Mapnik")%>%
addPolygons(data=schooldistrict,
color="red")%>%
addMarkers(data=bostonschoolsmap, popup = ~paste0(SCH_NAME))
runApp('Project-2.R')
runApp('Project-2.R')
runApp('Project-2.R')
length(input$cityselect)
#For the map I am going to use a geojson map
kaggle.api <- "https://www.kaggle.com/api/v1/datasets/download/crawford/boston-public-schools/Public_Schools.csv"
kaggle.auth <- function() {
source("credentials2.R")
httr::authenticate(username, key)
}
response <- httr::GET(kaggle.api, kaggle.auth())
#data<-writeOGR(Bostonschools,driver="GEOJSON")
Bostonschools<- read_csv(response$content)
bostonschoolsmap.load<-readOGR("Public_Schools.geojson")
schooldistrict<-readOGR("Boston_Neighborhoods.shp")
citylist<-unique(bostonschoolsmap$CITY)
schoollist<-unique(bostonschoolsmap$SCH_TYPE)
zipcodelist<-unique(bostonschoolsmap$ZIPCODE)
populationlist<-unique(bostonschoolsmap$PL)
# Define UI for application
ui <- navbarPage("Public Schools in Boston",
theme = shinytheme("darkly"),
tabPanel("Map",
sidebarLayout(
sidebarPanel(
selectInput("principleselect",
"Principle",
choices = sort(unique(bostonschoolsmap$PL)),
selected = c(""),
selectize = T,
multiple = T)
),
mainPanel(
# Map Output
leafletOutput("leaflet")
)
)
),
tabPanel("Schools Plots",
sidebarLayout(
sidebarPanel(
selectInput("cityselect",
"City",
choices = sort(unique(Bostonschools$CITY)),
selected = c(""),
selectize = T,
multiple = T),
selectInput("schooltypeselect",
"School Type",
levels(schoollist),
choices = sort(unique(Bostonschools$SCH_TYPE)),
selectize = T,
multiple = T),
selectInput("zipcodeselect",
"Zip Code",
choices = sort(unique(Bostonschools$ZIPCODE)),
selected = c("ES"),
selectize = T,
multiple = T)
),
fluidRow(
column(5, plotlyOutput("Plot1")),
column(7, plotlyOutput("Plot2"))
)
)
),
tabPanel("Table",
fluidPage(
wellPanel(DT::dataTableOutput("table"))
)
)
)
length(input$populationselect) > 0
